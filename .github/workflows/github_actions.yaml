name: Flutter Build & Deploy

on:
  push:
    branches:
      - main 
  workflow_dispatch:  

jobs:
  build_and_deploy:
    name: Build & Deploy to Firebase App Distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.1'

    - name: Install dependencies
      run: flutter pub get
    
    - name: Set API_KEY environment variable
      env:
        API_KEY: ${{ secrets.API_KEY }}
      run: |
        echo "API_KEY=$API_KEY" >> $GITHUB_ENV

    - name: Build APK
      run: |
        flutter build apk --release

    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: apk
        path: build/app/outputs/flutter-apk/app-release.apk

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'  # Latest LTS version

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy to Firebase App Distribution
      env:
        FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        FIREBASE_REFRESH_TOKEN: ${{ secrets.FIREBASE_REFRESH_TOKEN }}
      run: |
        # Authenticate with refresh token
        firebase deploy --only hosting --token "$FIREBASE_REFRESH_TOKEN"
        
        echo "APK files:"
        ls -l build/app/outputs/flutter-apk/
        
        # Distribute Universal APK
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
          echo "Distributing universal APK..."
          firebase appdistribution:distribute "build/app/outputs/flutter-apk/app-release.apk" \
            --app "$FIREBASE_APP_ID" \
            --groups "testers" \
            --release-notes "New version available for testing"
        else
          echo "Universal APK not found, trying architecture-specific APKs..."
          if [ -f "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk" ]; then
            firebase appdistribution:distribute "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk" \
              --app "$FIREBASE_APP_ID" \
              --groups "testers" \
              --release-notes "New version (armeabi-v7a)"
          fi
          if [ -f "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" ]; then
            firebase appdistribution:distribute "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" \
              --app "$FIREBASE_APP_ID" \
              --groups "testers" \
              --release-notes "New version (arm64-v8a)"
          fi
          if [ -f "build/app/outputs/flutter-apk/app-x86_64-release.apk" ]; then
            firebase appdistribution:distribute "build/app/outputs/flutter-apk/app-x86_64-release.apk" \
              --app "$FIREBASE_APP_ID" \
              --groups "testers" \
              --release-notes "New version (x86_64)"
          fi
        fi